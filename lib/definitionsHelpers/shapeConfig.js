/*
* Here's an explanation as to how this works:
* You can put shapes in this as multiple types:
* Direct Array (name: [[1, 1], [-1, 1], [-1, -1], [1, -1]])
* SGV Array (name: ["sgv path", scale (can be 1 if you don't have a scale)])
* Stuff like "triBlade" and "grouper"
*/

module.exports = {
    wtf1: (() => {
        let s = [];
        for (let i = 1; i < 11; i++) {
            let x = Math.cos((Math.PI * 2) / 10 * i) * (i % 2 === 0 ? 2 : 1),
                y = Math.sin((Math.PI * 2) / 10 * i) * (i % 2 === 0 ? 0.5 : 1);
            s.push([x, y]);
        }
        return s;
    })(),
    wtf2: (() => {
        let s = [];
        for (let i = 1; i < 11; i++) {
            let x = Math.cos((Math.PI * 2) / 10 * i) * (i % 2 === 0 ? 2 : 0.5),
                y = Math.sin((Math.PI * 2) / 10 * i) * (i % 2 === 0 ? 0.5 : 2);
            s.push([x, y]);
        }
        return s;
    })(),
    wtf3: (() => {
        let s = [];
        for (let i = 1; i < 12; i++) {
            let x = Math.cos((Math.PI * 2) / 12 * i) * (i % 2 === 0 ? 2 : 1),
                y = Math.sin((Math.PI * 2) / 12 * i) * (i % 2 === 0 ? 0.5 : 1);
            s.push([x, y]);
        }
        return s;
    })(),
    omegaPenta: (() => {
        let s = [];
        for (let i = 1; i < 11; i++) {
            let x = -Math.cos((Math.PI * 2) / 10 * i) * (i % 2 === 0 ? 1.5 : 1),
                y = -Math.sin((Math.PI * 2) / 10 * i) * (i % 2 === 0 ? 1.5 : 1);
            s.push([x.toPrecision(3), y.toPrecision(3)]);
        }
        return s;
    })(),
    triBlade: (() => {
        let output = [];
        for (let i = 0; i < 12; i++) {
            let theta = (i / 12) * 2 * Math.PI,
                x = Math.cos(theta - .025),
                y = Math.sin(theta - .025);
            if (i === 2 || i === 10 || i === 6) {
                x = 0.5 * Math.cos(theta - .025);
                y = 0.5 * Math.sin(theta - .025);
            }
            if (i === 0 || i === 4 || i === 8) {
                x = 1.25 * Math.cos(theta - .025);
                y = 1.25 * Math.sin(theta - .025);
            }
            output.push([x.toPrecision(3), y.toPrecision(3)]);
        }
        return output;
    })(),
    crusher: (() => {
        let output = [];
        for (let [scale, theta] of [
            [1, 0],
            [1, .286 * Math.PI],
            [1, .571 * Math.PI],
            [0.36, Math.PI / 2],
            [-0.75, 0],
            [0.36, -(Math.PI / 2)],
            [1, 1.429 * Math.PI],
            [1, 1.714 * Math.PI]
        ]) output.push([scale * Math.cos(theta), scale * Math.sin(theta)]);
        return output;
    })(),
    visDestructia: (() => {
        let output = [];
        for (let [scale, theta] of [
            [0.25, .611],
            [-1, -0.838],
            [-0.5, -0.436],
            [0, 0],
            [-0.5, .436],
            [-1, .838],
            [0.25, -0.611]
        ]) output.push([scale * Math.cos(theta - .025), scale * Math.sin(theta - .025)]);
        return output;
    })(),
    grouper: (() => {
        let output = [];
        for (let [scale, theta] of [
            [1, .489],
            [-1, -1.257],
            [-0.5, -0.96],
            [-0.75, 0],
            [-0.5, .96],
            [-1, 1.257],
            [1, -0.489]
        ]) output.push([scale * Math.cos(theta), scale * Math.sin(theta)]);
        return output;
    })(),
    vanguard: (() => {
        let output = [];
        for (let [scale, theta] of [
            [1, 0],
            [-1, -0.959],
            [-0.125, 0],
            [-1, .959]
        ]) output.push([scale * Math.cos(theta - .0261), scale * Math.sin(theta - .0261)]);
        return output;
    })(),
    battleship: (() => {
        let output = [];
        for (let [scale, theta] of [
            [1.5, .14],
            [1.1, .335],
            [0.75, .593],
            [0.475, 1.047],
            [0.517, 1.466],
            [-0.55, -1.187],
            [-0.55, -0.838],
            [-1, -0.419],
            [-1.2, -0.312],
            [-1.375, -0.192],
            [-1.45, -0.087],
            [-1.45, .087],
            [-1.375, .192],
            [-1.2, .312],
            [-1, .419],
            [-0.55, .838],
            [-0.55, 1.187],
            [0.517, -1.466],
            [0.475, -1.047],
            [0.75, -0.593],
            [1.1, -0.335],
            [1.5, -0.14]
        ]) output.push([scale * 1.5 * Math.cos(theta - .0261), scale * 1.5 * Math.sin(theta - .0261)]);
        return output;
    })(),
    nuke: ["M -115825.0046 -51899.336599999995 L -115825.0046 -55148.8094 -89690.3429 -57122.0082 -76683.3125 -57122.0082 -76683.3125 -52944.1146 -53466.04400000001 -52944.1146 -39122.19410000001 -42035.17019999999 -8610.804499999998 -53524.073 23723.636799999993 -56889.903 27977.849499999997 -56889.903 65417.7289 -51551.4834 89972.455 -42035.17019999999 92282.377 -37160.960999999996 94044.8092 -37160.960999999996 95807.24139999998 -37876.77099999999 114121.98760000001 -21687.280999999995 120017.39349999999 769.0494000000035 113332.0198 23070.642999999996 97428.01539999999 35720.071800000005 95645.164 34327.4406 91390.9513 34327.4406 91593.229 39201.6498 65579.80629999998 54752.6982 27410.578599999993 58698.48659999999 -12703.577900000004 53824.27739999999 -40175.69720000001 43147.438200000004 -53060.8505 53360.066999999995 -75427.5317 53360.066999999995 -75427.5317 57770.0658 -88312.685 58060.65419999999 -114569.2238 54752.6982 -114569.2238 50574.8046 -88798.9172 50574.8046 -88798.9172 21329.549400000004 -120160.8941 21329.549400000004 -120404.0102 -22538.333399999996 -89042.03330000001 -23002.5438 -88555.80110000001 -49462.5366 Z M -64010.168399999995 16919.2431 L -78597.1344 16919.2431 -78597.1344 -15343.3797 -64496.40059999999 -15343.3797 Z", 51200],
    shard: ["m-164.9029 -40.75328l0 79.07611l258.03412 0l58.267723 -15.262466l152.60104 -23.582678l-147.05249 -22.19685l-58.267723 -18.03412z", 80],
    missileLauncher: ['M -230.31445 -46.876953 L -251.27539 -44.052734 L -241.40234 -13.146484 L -247.12305 -12.277344 L -249.22852 -6.3066406 L -250.27734 -0.671875 L -249.20898 5.4960938 L -245.93359 15.111328 L -243.23047 16.056641 L -253.25781 37.097656 L -231.20117 36.740234 L -227.23242 48.664062 L -220.99023 50.78125 L -199.83789 47.941406 L -200.43164 52.632812 L -199.48242 55.96875 L -196.01367 58.787109 L -190.44141 61.205078 L -181.79297 63.595703 L -184.89844 71.689453 L -181.9043 72.837891 L -178.48633 63.933594 L -172.39258 64.509766 L -176.49414 75.193359 L -174.22656 76.0625 L -168.66602 61.574219 L -169.61719 53.408203 L -159.20898 53.875 L -118.70508 60.279297 L -109.95117 63.638672 L -71.542969 71.013672 L -43.630859 75.03125 L -18.464844 75.050781 L -4.8867188 74.90625 L 10.337891 68.03125 L 27.875 58.960938 L 37.685547 50.140625 L 42.193359 52.005859 L 72.388672 36.816406 L 77.220703 38.535156 L 74.683594 44.792969 L 50.230469 58.972656 L 44.572266 56.267578 L 25.378906 67.910156 L 34.826172 89.34375 L 47.511719 83.5 L 58.78125 79.255859 L 60.248047 74.734375 L 63.845703 73.033203 L 71.25 74.671875 L 105.08398 75.472656 L 137.54492 74.273438 L 204.96094 74.439453 L 224.96289 73.949219 L 233.16602 74.552734 L 249.05859 72.21875 L 276.08789 67.728516 L 274.56445 71.699219 L 279.46484 73.580078 L 283.94531 61.908203 L 359.06836 48.966797 L 403.94336 48.380859 L 402.19727 52.931641 L 408.38281 55.306641 L 411.0918 48.246094 L 431.58984 48.212891 L 436.37695 50.050781 L 439.55664 41.765625 L 442.17969 42.771484 L 444.57617 36.529297 L 439.26562 34.490234 L 441.50586 28.65625 L 437.59766 27.15625 L 361.4043 26.835938 L 248.74023 28.046875 L 224.86719 27.453125 L 199.4707 27.345703 L 165.80664 28.888672 L 165.45508 24.867188 L 187.44141 24.203125 L 213.92188 22.478516 L 251.75391 17.308594 L 296.60547 8.6132812 L 340.97266 -3.4296875 L 354.75977 -9.0976562 L 340.06445 -14.365234 L 287.81641 -24.386719 L 234.94727 -32.791016 L 179.89062 -36.458984 L 143.38672 -35.240234 L 103.5 -31.972656 L 60.712891 -26.478516 L 57.771484 -23.890625 L 49.011719 -23.816406 L 45.412109 -26.777344 L 26.986328 -27.162109 L -55.15625 -24.138672 L -114.19336 -22.277344 L -151.52539 -20.353516 L -153.61133 -22.173828 L -159.91211 -22.455078 L -169.98242 -21.865234 L -230.31445 -46.876953 z M 42.201172 18.8125 L 43.472656 26.664062 L -165.125 28.414062 L -165.99219 24.736328 L 42.201172 18.8125 z M 55.267578 20.361328 L 76.419922 20.712891 L 77.941406 26.519531 L 56.652344 26.515625 L 55.267578 20.361328 z M 86.373047 21.994141 L 154.92383 25.136719 L 86.681641 27.466797 L 86.373047 21.994141 z', 70],
    missile: ["M -238.80859 -93.488281 L -238.80859 -23.257812 L -250.25586 -23.257812 L -262.21875 -20.65625 L -262.21875 21.132812 L -248.86719 23.560547 L -239.1543 23.560547 L -239.1543 93.099609 L -215.22656 93.099609 L -99.039062 23.388672 L .15234375 23.388672 L .15234375 46.626953 L 46.970703 46.626953 L 115.81641 23.214844 L 172.3457 23.214844 L 172.3457 58.416016 L 213.09961 23.388672 L 239.80273 23.388672 L 272.58008 21.828125 L 305.00391 16.800781 L 334.13867 9.8632812 L 347.31641 4.6601562 L 355.29688 -0.021484375 L 346.625 -5.3964844 L 332.75195 -10.945312 L 303.44531 -17.708984 L 270.67188 -22.21875 L 242.05664 -23.603516 L 213.27344 -23.603516 L 172.86914 -58.113281 L 172.86914 -23.779297 L 117.20117 -23.779297 L 47.490234 -46.84375 L .49804688 -46.84375 L .49804688 -23.431641 L -99.039062 -23.431641 L -214.70312 -93.488281 L -238.80859 -93.488281 z M -231.69922 -23.779297 L -201.35156 -23.779297 L -201.35156 -21.525391 L -232.21875 -21.525391 L -231.69922 -23.779297 z M -232.21875 22.267578 L -201.35156 22.267578 L -201.35156 24.521484 L -231.69922 24.521484 L -232.21875 22.267578 z", 75],
    icbm: ["M 253032 -4477 L 253032 4524 204740 4524 190698 12631 98298 27146 98298 30147 -162639 30147 -163830 40243 -165640 40243 -165640 41577 -178594 41577 -191548 46673 -206883 46673 -206883 39291 -227409 51006 -235696 53292 -252270 48720 -252270 31528 -241836 25504 -241836 20384 -227219 11335 -220504 11335 -220504 -11287 -227076 -11287 -241792 -20193 -241840 -25479 -252984 -31242 -252365 -48577 -235601 -53245 -227314 -51006 -206931 -39243 -206931 -46625 -191167 -46625 -177736 -41529 -165640 -41386 -165640 -40243 -163854 -40243 -162592 -30194 98274 -30194 98274 -27122 190643 -12597 204527 -4581 216503 -4581 Z", 50000],
    rpgRocket: ['m-188.62112 -16.533947l8.0143585 0l12.969101 -24.251179l27.098267 9.488823l0 -2.001377l17.078102 0l0 6.2210903l10.228264 0l134.11871 -21.404089l38.26966 0l120.62271 31.946732l38.694733 0l4.3259735 4.321554l22.032852 0l0 26.571358l-22.245377 0l-3.9540558 3.9540453l-38.012848 0l-120.72455 29.892221l-38.274086 0l-134.53935 -20.877178l-11.596466 0l0 5.061001l-13.602264 0l0 -2.320179l-28.045822 11.388359l-12.335907 -22.56418l-78.34146 0l0 -35.427002z', 70]
};
